/* Stratego.java
 * Brian Quinlivan, Ian McMurray, Andrew McNeil, Michael Jurgiel
 * 12/26/16
 */

import javax.swing.*;
import javax.swing.border.MatteBorder;
import java.awt.*;
import java.awt.event.*;
import java.net.URL; 

public class Stratego extends JFrame implements ActionListener { // Brian Q. 12/24/16 

	private static Stratego game;
	private static JPanel eastPanel;
	private static JPanel piecesPanel;
	private static JPanel board;
	private static String selectedPiece;
	private static ImageIcon[] pieceImages = new ImageIcon[12];
	private static boolean play = false;
	private JButton gameButton;
	private JButton restartButton;

	public Stratego() {
		setSize(1024, 800);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setTitle("Stratego");
		setLayout(new BorderLayout());
		createEastPanel();
		Instructions();
	}

	private void createEastPanel() {
		eastPanel = new JPanel();
		eastPanel.setLayout(new BorderLayout());
		ImageIcon strategoImage = createImageIcon("/stratego.png", "stratego");
		JLabel northPanel = new JLabel();
		northPanel.setIcon(strategoImage);
		JLabel instructionsLocation = new JLabel("Instructions");
		eastPanel.add(northPanel, BorderLayout.NORTH);
		JPanel buttonPanel = new JPanel();
		buttonPanel.setLayout(new GridLayout(2,1));
	    gameButton = new JButton("Play");
	    buttonPanel.add(gameButton);
	    gameButton.addActionListener(this);
		restartButton = new JButton("Restart"); // button to randomly place pieces
		buttonPanel.add(restartButton);
		restartButton.addActionListener(this);
		eastPanel.add(buttonPanel, BorderLayout.SOUTH);
		piecesPanel = new JPanel();
		piecesPanel.setLayout(new GridLayout(4, 3));
		piecesPanel.setBackground(Color.RED);
		eastPanel.setMinimumSize(new Dimension(300, 500)); 
		eastPanel.setPreferredSize(new Dimension(300, 500)); // end Brian Q. 12/24/16 
		//for(int i = 0; i<12; i++) {
		//	JLabel label = new JLabel("pieces");
		//	piecesPanel.add(label);
		//}
		
		
		// creating images
		ImageIcon bomb = createImageIcon("/bomb.jpg", "bomb");
		pieceImages[0] = bomb;
		ImageIcon captain = createImageIcon("/captain6.jpg", "captain");
		pieceImages[1] = captain;
		ImageIcon colonel = createImageIcon("/colonel8.jpg", "colonel");
		pieceImages[2] = colonel;
		ImageIcon flag = createImageIcon("/flag.jpg", "flag");
		pieceImages[3] = flag;
		ImageIcon general = createImageIcon("/general9.jpg", "general");
		pieceImages[4] = general;
		ImageIcon marshal = createImageIcon("/marshal10.jpg", "marshal");
		pieceImages[5] = marshal;
		ImageIcon scout = createImageIcon("/scout2.jpg", "scout");
		pieceImages[6] = scout;
		ImageIcon spy = createImageIcon("/spy.jpg", "spy");
		pieceImages[7] = spy;
		ImageIcon major = createImageIcon("/major7.jpg", "major");
		pieceImages[8] = major;
		ImageIcon lieutenent = createImageIcon("/lieutenant5.jpg", "liutenant");
		pieceImages[9] = lieutenent;
		ImageIcon sergeant = createImageIcon("/sergeant4.jpg", "sergeant");
		pieceImages[10] = sergeant;
		ImageIcon miner = createImageIcon("/miner3.jpg", "miner");
		pieceImages[11] = miner;
		
		JButton button = new JButton("0/1", marshal); // Brian Q. 12/31/16
		button.setBorder(new MatteBorder(3,1,3,1, Color.BLACK));
		piecesPanel.add(button);
		button.addActionListener(this);
		button = new JButton("0/1", general);
		button.setBorder(new MatteBorder(3,1,3,1, Color.BLACK));
		piecesPanel.add(button);
		button.addActionListener(this);
		button = new JButton("0/2", colonel);
		button.setBorder(new MatteBorder(3,1,3,1, Color.BLACK));
		piecesPanel.add(button);
		button.addActionListener(this);
		button = new JButton("0/3", major);
		button.setBorder(new MatteBorder(3,1,3,1, Color.BLACK));
		piecesPanel.add(button);
		button.addActionListener(this);
		button = new JButton("0/4", captain);
		button.setBorder(new MatteBorder(3,1,3,1, Color.BLACK));
		piecesPanel.add(button);
		button.addActionListener(this);
		button = new JButton("0/4", lieutenent);
		button.setBorder(new MatteBorder(3,1,3,1, Color.BLACK));
		piecesPanel.add(button);
		button.addActionListener(this);
		button = new JButton("0/4", sergeant);
		button.setBorder(new MatteBorder(3,1,3,1, Color.BLACK));
		piecesPanel.add(button);
		button.addActionListener(this);
		button = new JButton("0/5", miner);
		button.setBorder(new MatteBorder(3,1,3,1, Color.BLACK));
		piecesPanel.add(button);
		button.addActionListener(this);
		button = new JButton("0/8", scout);
		button.setBorder(new MatteBorder(3,1,3,1, Color.BLACK));
		piecesPanel.add(button);
		button.addActionListener(this);
		button = new JButton("0/1", spy);
		button.setBorder(new MatteBorder(3,1,3,1, Color.BLACK));
		piecesPanel.add(button);
		button.addActionListener(this);
		button = new JButton("0/6", bomb);
		button.setBorder(new MatteBorder(3,1,3,1, Color.BLACK));
		piecesPanel.add(button);
		button.addActionListener(this);
		button = new JButton("0/1", flag);
		button.setBorder(new MatteBorder(3,1,3,1, Color.BLACK));
		piecesPanel.add(button);
		button.addActionListener(this);
		
		eastPanel.add(piecesPanel, BorderLayout.CENTER);
	}

	public static void main(String[] args) {
		game = new Stratego(); // stratego is a frame in class
		buildBoard();
		game.add(eastPanel, BorderLayout.EAST);
		
		game.setVisible(true);
		eastPanel.invalidate();
		eastPanel.repaint();
	} // end main method
	
	private static ImageIcon createImageIcon(String path, String desc) { // wrap images in ImageIcon
		URL url = Stratego.class.getResource(path); // loads image from where class is running
		if(url != null) {
			return new ImageIcon(url, desc);
		}
		
		System.out.println("File not found");
		return null; 
	}

	private static void buildBoard() {

		board = new JPanel();
		board.setLayout(new GridLayout(10, 10));
		board.setBorder(new MatteBorder(2,2,2,2, Color.WHITE));
		ImageIcon grass = createImageIcon("/grass.gif", "grass");
		ImageIcon water = createImageIcon("/water.gif", "water");
		JButton button; 
		
		for(int i = 0; i<100; i++) {
			if(i == 42 || i == 43 || i == 46 || i == 47 || i == 52 || i == 53 || i == 56 || i == 57) {
				button = new JButton("", water); // "" = no text in button
			// button.setEnabled(false); //turns water grey
			}
			else {
				button = new JButton("", grass); // "" = no text in button
			}
			button.setBorder(BorderFactory.createLineBorder(Color.WHITE));//
			button.addActionListener(game);
			board.add(button);
		}
		
		game.add(board, BorderLayout.CENTER);
		board.setBackground(Color.GRAY);
		board.invalidate();
		board.revalidate();
		game.repaint();
	}

	public static void Instructions() { // Andrew M. 1/4/17
		
			System.out.println("Welcome to Stratego");
			System.out.println("--------------------");
			System.out.println("Objective: Capture the enemie's flag");
			System.out.println("------------------------------------");
			System.out.println("Pieces: Each player has 33 moveable pieces");
			System.out.println("1 Marshal, 1 General, 2 Colonels, 3 Majors, 4 Captains,");
			System.out.println("4 Lieutenants, 4 Sergeants, 5 Miners, 8 Scouts, and 1 Spy.");
			System.out.println("You also get 7 pieces that cannot move: 1 Flag and 6 Bombs");
			System.out.println("----------------------------");
			System.out.println("Setup");
			System.out.println("Place each piece in a box in the last 4 rows, and leave");
			System.out.println("the middle two rows empty. The game automatically starts after placing pieces");
			System.out.println("------------------------------------------------");
			System.out.println("Gameplay");
			System.out.println("You and your enemy take alternating turns with AI going second");
			System.out.println("On your turn, you must do one of two things:");
			System.out.println("- Attack one of you opponent's pieces ");
			System.out.println("- Move one of your pieces to an open adjacent space");
			System.out.println("(Note: If you cannot do either, you automatically lose the game)");
			System.out.println("------------------------------------");
			System.out.println("Rules for Movement");
			System.out.println("1. Pieces move one square at a time: Forward, Backward, Left, and Right");
			System.out.println("2. Pieces cannot move diagonally or jump over other pieces");
			System.out.println("3. Pieces cannot move into an occupied suqare (unless attacking an enemy piece)");
			System.out.println("4. Only one piece can be moved each turn");
			System.out.println("----------------------------------------");
			System.out.println("Attacking");
			System.out.println("To attack, click on your piece and click the opponent's piece you wish to attack");
			System.out.println("The piece with the lower value will be removed from play. If the two pieces have an");
			System.out.println("equal value, both a removed from the board.");
			System.out.println("-------------------------------------------");
			System.out.println("Special Peices");
			System.out.println("Scouts can move any number of open spaces in one direction and attack the same turn");
			System.out.println("When any piece touches a bomb, the attacking piece is removed from the board");
			System.out.println("However, when a miner attacks a bomb, the bomb is defused and removed from the board.");
			System.out.println("Spies will be captured by any pice that attacks, but if the Spy attacks the ");
			System.out.println("opponent's Marshal, the Marshal is captured.");
			System.out.println("--------------------------------------------");
			System.out.println("Winning the Game");
			System.out.println("The first player to attack an opponent's flag captures it and wins the game");
			System.out.println("If all of your moveable pieces have been removed from play, you automatically lose the game. ");
		} 	// end Andrew McNeil 1/4/17


	
	public void actionPerformed(ActionEvent e) {
		JButton clickedButton = (JButton) e.getSource();
		Component[] components = board.getComponents();
		for(int i = 0; i<100; i++) {
			if(components[i] == clickedButton) {
				System.out.println("Button Pressed" + i);
				ImageIcon image = (ImageIcon) clickedButton.getIcon();
				if(!image.getDescription().equals("water")) {
					if(i >= 60) { // disables placing pieces in 0-59
						assignBoardPiece(clickedButton);
					}
				} // end if
				return;
			}
		}
		components = piecesPanel.getComponents();
		for(int i = 0; i<12; i++) {
			if(components[i] == clickedButton) {
				ImageIcon image = (ImageIcon) clickedButton.getIcon();
				selectedPiece = image.getDescription();
				System.out.println("Button Pressed " + selectedPiece);
				return;
			}
		}
		if(clickedButton == gameButton) {
			play = true;
		}
		if(clickedButton == restartButton) {
			game.remove(board);
			board = null;
			buildBoard();
			play = false;
			selectedPiece = "";

		}
		
		//System.out.println("Button Pressed"); // end Brian Q. 12/31/16
	}

	private void assignBoardPiece(JButton clickedButton) {
		for(int i = 0; i<12; i++) {
			if(pieceImages[i].getDescription().equals(selectedPiece)) {
				clickedButton.setIcon(pieceImages[i]);
			} 
		}
	}
} // end class Stratego
